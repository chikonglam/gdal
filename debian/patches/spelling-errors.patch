Description: Fix spelling errors.
 Reseting   -> Resetting
 Overlaping -> Overlapping
 Collumn    -> Column
 Deleteing  -> Deleting
 repsonse   -> response
 occured    -> occurred
Author: Bas Couwenberg <sebastic@debian.org>
Forwarded: not-needed

--- a/ogr/ogrfielddefn.cpp
+++ b/ogr/ogrfielddefn.cpp
@@ -280,7 +280,7 @@ void OGRFieldDefn::SetType( OGRFieldType
     if( !OGR_AreTypeSubTypeCompatible(eTypeIn, eSubType) )
     {
         CPLError(CE_Warning, CPLE_AppDefined,
-                 "Type and subtype of field definition are not compatible. Reseting to OFSTNone");
+                 "Type and subtype of field definition are not compatible. Resetting to OFSTNone");
         eSubType = OFSTNone;
     }
     eType = eTypeIn;
@@ -366,7 +366,7 @@ void OGRFieldDefn::SetSubType( OGRFieldS
     if( !OGR_AreTypeSubTypeCompatible(eType, eSubTypeIn) )
     {
         CPLError(CE_Warning, CPLE_AppDefined,
-                 "Type and subtype of field definition are not compatible. Reseting to OFSTNone");
+                 "Type and subtype of field definition are not compatible. Resetting to OFSTNone");
         eSubType = OFSTNone;
     }
     else
--- a/ogr/ogrsf_frmts/plscenes/ogrplscenesdataset.cpp
+++ b/ogr/ogrsf_frmts/plscenes/ogrplscenesdataset.cpp
@@ -444,7 +444,7 @@ GDALDataset* OGRPLScenesDataset::OpenRas
 
         CPLErrorReset();
         poOutDS->SetDescription(poOpenInfo->pszFilename);
-        CSLDestroy(poOutDS->GetFileList()); /* so as to probe all auxiliary files before reseting the allowed extensions */
+        CSLDestroy(poOutDS->GetFileList()); /* so as to probe all auxiliary files before resetting the allowed extensions */
     }
 
     if( bUseVSICURL )
--- a/ogr/ogrsf_frmts/plscenes/ogrplscenesv1dataset.cpp
+++ b/ogr/ogrsf_frmts/plscenes/ogrplscenesv1dataset.cpp
@@ -651,7 +651,7 @@ retry:
 
         CPLErrorReset();
         poOutDS->SetDescription(poOpenInfo->pszFilename);
-        CSLDestroy(poOutDS->GetFileList()); /* so as to probe all auxiliary files before reseting the allowed extensions */
+        CSLDestroy(poOutDS->GetFileList()); /* so as to probe all auxiliary files before resetting the allowed extensions */
     }
     else if( CPLGetLastErrorType() == CE_None )
     {
--- a/ogr/ogrsf_frmts/wasp/ogrwasplayer.cpp
+++ b/ogr/ogrsf_frmts/wasp/ogrwasplayer.cpp
@@ -496,7 +496,7 @@ OGRErr OGRWAsPLayer::WriteRoughness( OGR
                             OGREnvelope oErrorRegion = oZones[i].oEnvelope;
                             oErrorRegion.Intersect( oEnvelope );
                             CPLError(CE_Failure, CPLE_NotSupported,
-                                    "Overlaping polygons in rectangle (%.16g %.16g, %.16g %.16g))",
+                                    "Overlapping polygons in rectangle (%.16g %.16g, %.16g %.16g))",
                                     oErrorRegion.MinX,
                                     oErrorRegion.MinY,
                                     oErrorRegion.MaxX,
@@ -516,7 +516,7 @@ OGRErr OGRWAsPLayer::WriteRoughness( OGR
                             OGREnvelope oErrorRegion = oZones[i].oEnvelope;
                             oErrorRegion.Intersect( oEnvelope );
                             CPLError(CE_Failure, CPLE_NotSupported,
-                                    "Overlaping polygons in rectangle (%.16g %.16g, %.16g %.16g))",
+                                    "Overlapping polygons in rectangle (%.16g %.16g, %.16g %.16g))",
                                     oErrorRegion.MinX,
                                     oErrorRegion.MinY,
                                     oErrorRegion.MaxX,
--- a/frmts/pcraster/libcsf/mperror.c
+++ b/frmts/pcraster/libcsf/mperror.c
@@ -12,7 +12,7 @@ static const char * const errolist[ERROR
 "Illegal cell representation constant",
 "Access denied",
 "Row number to big",
-"Collumn number to big",
+"Column number to big",
 "Map is not a raster file",
 "Illegal conversion",
 "No space on device to write",
--- a/ogr/ogrsf_frmts/libkml/ogrlibkmldatasource.cpp
+++ b/ogr/ogrsf_frmts/libkml/ogrlibkmldatasource.cpp
@@ -2070,7 +2070,7 @@ OGRErr OGRLIBKMLDataSource::DeleteLayer
         if ( !VSIStatL ( pszFilePath, &oStatBufL ) ) {
             if ( VSIUnlink ( pszFilePath ) ) {
                 CPLError ( CE_Failure, CPLE_AppDefined,
-                           "ERROR Deleteing Layer %s from filesystem as %s",
+                           "ERROR Deleting Layer %s from filesystem as %s",
                            papoLayers[iLayer]->GetName (  ), pszFilePath );
             }
         }
--- a/port/cpl_aws.cpp
+++ b/port/cpl_aws.cpp
@@ -525,7 +525,7 @@ bool VSIS3HandleHelper::CanRestartOnErro
     CPLXMLNode* psTree = CPLParseXMLString(pszErrorMsg);
     if( psTree == NULL )
     {
-        if(bSetError) { VSIError(VSIE_AWSError, "Malformed AWS XML repsonse: %s", pszErrorMsg); }
+        if(bSetError) { VSIError(VSIE_AWSError, "Malformed AWS XML response: %s", pszErrorMsg); }
         return false;
     }
 
@@ -533,7 +533,7 @@ bool VSIS3HandleHelper::CanRestartOnErro
     if( pszCode == NULL )
     {
         CPLDestroyXMLNode(psTree);
-        if(bSetError) { VSIError(VSIE_AWSError, "Malformed AWS XML repsonse: %s", pszErrorMsg); }
+        if(bSetError) { VSIError(VSIE_AWSError, "Malformed AWS XML response: %s", pszErrorMsg); }
         return false;
     }
 
@@ -543,7 +543,7 @@ bool VSIS3HandleHelper::CanRestartOnErro
         if( pszRegion == NULL )
         {
             CPLDestroyXMLNode(psTree);
-            if(bSetError) { VSIError(VSIE_AWSError, "Malformed AWS XML repsonse: %s", pszErrorMsg); }
+            if(bSetError) { VSIError(VSIE_AWSError, "Malformed AWS XML response: %s", pszErrorMsg); }
             return false;
         }
         SetAWSRegion(pszRegion);
@@ -560,7 +560,7 @@ bool VSIS3HandleHelper::CanRestartOnErro
                                     pszEndpoint[m_osBucket.size()] != '.')) )
         {
             CPLDestroyXMLNode(psTree);
-            if(bSetError) { VSIError(VSIE_AWSError, "Malformed AWS XML repsonse: %s", pszErrorMsg); }
+            if(bSetError) { VSIError(VSIE_AWSError, "Malformed AWS XML response: %s", pszErrorMsg); }
             return false;
         }
         if( !m_bUseVirtualHosting &&
--- a/ogr/ogrsf_frmts/shape/ogrshapelayer.cpp
+++ b/ogr/ogrsf_frmts/shape/ogrshapelayer.cpp
@@ -2706,7 +2706,7 @@ OGRErr OGRShapeLayer::Repack()
             if( !CopyInPlace( VSI_SHP_GetVSIL(hDBF->fp), oTempFileDBF ) )
             {
                 CPLError( CE_Failure, CPLE_FileIO, 
-                        "An error occured while copying the content of %s on top of %s. "
+                        "An error occurred while copying the content of %s on top of %s. "
                         "The non corrupted version is in the _packed.dbf, "
                         "_packed.shp and _packed.shx files that you should rename "
                         "on top of the main ones.",
@@ -2735,7 +2735,7 @@ OGRErr OGRShapeLayer::Repack()
             if( !CopyInPlace( VSI_SHP_GetVSIL(hSHP->fpSHP), oTempFileSHP ) )
             {
                 CPLError( CE_Failure, CPLE_FileIO, 
-                        "An error occured while copying the content of %s on top of %s. "
+                        "An error occurred while copying the content of %s on top of %s. "
                         "The non corrupted version is in the _packed.dbf, "
                         "_packed.shp and _packed.shx files that you should rename "
                         "on top of the main ones.",
@@ -2757,7 +2757,7 @@ OGRErr OGRShapeLayer::Repack()
             if( !CopyInPlace( VSI_SHP_GetVSIL(hSHP->fpSHX), oTempFileSHX ) )
             {
                 CPLError( CE_Failure, CPLE_FileIO, 
-                        "An error occured while copying the content of %s on top of %s. "
+                        "An error occurred while copying the content of %s on top of %s. "
                         "The non corrupted version is in the _packed.dbf, "
                         "_packed.shp and _packed.shx files that you should rename "
                         "on top of the main ones.",
