Description: Fix 'ressources' typo, replace with 'resources'.
Author: Bas Couwenberg <sebastic@xs4all.nl>
Last-Update: 2013-10-11
--- a/NEWS
+++ b/NEWS
@@ -1498,7 +1498,7 @@ USGSDEM driver:
 VRT driver:
  * Implement VRTDataset::IRasterIO() that can delegate to source Dataset::RasterIO() in particular cases
  * Implement GetMinimum() and GetMaximum()
- * GetFileList(): for /vsicurl/ ressources, don't actually test their existence as it can be excruciating slow
+ * GetFileList(): for /vsicurl/ resources, don't actually test their existence as it can be excruciating slow
  * VRTComplexSource: correctly deal with complex data type (#3977)
  * Fix 2 segfaults related to using '<VRTDataset', but with invalid XML, as the target filename of VRTDataset::Create()
  * Fix 'VRTDerivedRasterBand with ComplexSource and nodata value yields potentially uninitialized buffer' (#4045)
@@ -2020,7 +2020,7 @@ Port:
 Core:
  * RFC 24: progressive/async raster reading
  * On Unix, add capability of opening the target of a symlink through GDALOpen()
-   even if it not a real filename. Usefull for opening ressources expressed as
+   even if it not a real filename. Usefull for opening resources expressed as
    GDAL virtual filenames in software offering only file explorers (#3902)
  * Assume anything less than 100000 for GDAL_CACHEMAX is measured in metabytes.
  * Read cartesian coordinates if applicable in GDALLoadOziMapFile().
@@ -2440,7 +2440,7 @@ Core:
  * Add OGRLayer::GetName() and OGRLayer::GetGeomType() virtual methods,
    and their C and SWIG mappings (#3719)
  * On Unix, add capability of opening the target of a symlink through OGROpen()
-   even if it not a real filename. Usefull for opening ressources expressed as
+   even if it not a real filename. Usefull for opening resources expressed as
    GDAL virtual filenames in software offering only file explorers (#3902)
  * Expat based XML readers : add support for reading files with Windows-1252
    encoding
--- a/frmts/ecw/ecwasyncreader.cpp
+++ b/frmts/ecw/ecwasyncreader.cpp
@@ -281,7 +281,7 @@ NCSEcwReadStatus ECWAsyncReader::Refresh
     }
 
     /* Call CPLCleanupTLS explicitly since this thread isn't managed */
-    /* by CPL. This will free the ressources taken by the above CPLDebug */
+    /* by CPL. This will free the resources taken by the above CPLDebug */
     if( poReader->bComplete )
         CPLCleanupTLS();
 
--- a/frmts/ecw/ecwdataset.cpp
+++ b/frmts/ecw/ecwdataset.cpp
@@ -992,7 +992,7 @@ ECWDataset::~ECWDataset()
 
     // bInGDALGlobalDestructor is set to TRUE by gdaldllmain.cpp/GDALDestroy() so as
     // to avoid an issue with the ECW SDK 3.3 where the destructor of CNCSJP2File::CNCSJP2FileVector CNCSJP2File::sm_Files;
-    // static ressource allocated in NCJP2File.cpp can be called before GDALDestroy(), causing
+    // static resource allocated in NCJP2File.cpp can be called before GDALDestroy(), causing
     // ECW SDK resources ( CNCSJP2File files ) to be closed before we get here.
     if( poFileView != NULL &&
         (!bIsJPEG2000 || !GDALIsInGlobalDestructor()) )
--- a/frmts/nitf/nitffile.c
+++ b/frmts/nitf/nitffile.c
@@ -2102,7 +2102,7 @@ static char** NITFGenericMetadataReadTRE
             {
                 *pbError = TRUE;
                 CPLError( CE_Warning, CPLE_AppDefined,
-                          "Invalid item construct in %s TRE in XML ressource",
+                          "Invalid item construct in %s TRE in XML resource",
                           pszTREName );
                 break;
             }
@@ -2126,7 +2126,7 @@ static char** NITFGenericMetadataReadTRE
                 if (nIterations < 0)
                 {
                     CPLError( CE_Warning, CPLE_AppDefined,
-                            "Invalid loop construct in %s TRE in XML ressource : "
+                            "Invalid loop construct in %s TRE in XML resource : "
                             "invalid 'counter' %s",
                             pszTREName, pszCounter );
                     *pbError = TRUE;
@@ -2147,7 +2147,7 @@ static char** NITFGenericMetadataReadTRE
                 if (NPART < 0)
                 {
                     CPLError( CE_Warning, CPLE_AppDefined,
-                            "Invalid loop construct in %s TRE in XML ressource : "
+                            "Invalid loop construct in %s TRE in XML resource : "
                             "invalid 'counter' %s",
                             pszTREName, "NPART" );
                     *pbError = TRUE;
@@ -2165,7 +2165,7 @@ static char** NITFGenericMetadataReadTRE
                 if (NUMOPG < 0)
                 {
                     CPLError( CE_Warning, CPLE_AppDefined,
-                            "Invalid loop construct in %s TRE in XML ressource : "
+                            "Invalid loop construct in %s TRE in XML resource : "
                             "invalid 'counter' %s",
                             pszTREName, "NUMOPG" );
                     *pbError = TRUE;
@@ -2187,7 +2187,7 @@ static char** NITFGenericMetadataReadTRE
                 if (NPAR < 0)
                 {
                     CPLError( CE_Warning, CPLE_AppDefined,
-                            "Invalid loop construct in %s TRE in XML ressource : "
+                            "Invalid loop construct in %s TRE in XML resource : "
                             "invalid 'counter' %s",
                             pszTREName, "NPAR" );
                     *pbError = TRUE;
@@ -2196,7 +2196,7 @@ static char** NITFGenericMetadataReadTRE
                 if (NPARO < 0)
                 {
                     CPLError( CE_Warning, CPLE_AppDefined,
-                            "Invalid loop construct in %s TRE in XML ressource : "
+                            "Invalid loop construct in %s TRE in XML resource : "
                             "invalid 'counter' %s",
                             pszTREName, "NPAR0" );
                     *pbError = TRUE;
@@ -2214,7 +2214,7 @@ static char** NITFGenericMetadataReadTRE
                 if (NPLN < 0)
                 {
                     CPLError( CE_Warning, CPLE_AppDefined,
-                            "Invalid loop construct in %s TRE in XML ressource : "
+                            "Invalid loop construct in %s TRE in XML resource : "
                             "invalid 'counter' %s",
                             pszTREName, "NPLN" );
                     *pbError = TRUE;
@@ -2236,7 +2236,7 @@ static char** NITFGenericMetadataReadTRE
                 if (NXPTS < 0)
                 {
                     CPLError( CE_Warning, CPLE_AppDefined,
-                            "Invalid loop construct in %s TRE in XML ressource : "
+                            "Invalid loop construct in %s TRE in XML resource : "
                             "invalid 'counter' %s",
                             pszTREName, "NXPTS" );
                     *pbError = TRUE;
@@ -2245,7 +2245,7 @@ static char** NITFGenericMetadataReadTRE
                 if (NYPTS < 0)
                 {
                     CPLError( CE_Warning, CPLE_AppDefined,
-                            "Invalid loop construct in %s TRE in XML ressource : "
+                            "Invalid loop construct in %s TRE in XML resource : "
                             "invalid 'counter' %s",
                             pszTREName, "NYPTS" );
                     *pbError = TRUE;
@@ -2256,7 +2256,7 @@ static char** NITFGenericMetadataReadTRE
             else
             {
                 CPLError( CE_Warning, CPLE_AppDefined,
-                          "Invalid loop construct in %s TRE in XML ressource : "
+                          "Invalid loop construct in %s TRE in XML resource : "
                           "missing or invalid 'counter' or 'iterations' or 'formula'",
                           pszTREName );
                 *pbError = TRUE;
@@ -2441,7 +2441,7 @@ static char** NITFGenericMetadataReadTRE
             else
             {
                 CPLError( CE_Warning, CPLE_AppDefined,
-                          "Invalid if construct in %s TRE in XML ressource : "
+                          "Invalid if construct in %s TRE in XML resource : "
                           "missing or invalid 'cond' attribute",
                           pszTREName );
                 *pbError = TRUE;
--- a/frmts/vrt/vrtsources.cpp
+++ b/frmts/vrt/vrtsources.cpp
@@ -207,7 +207,7 @@ CPLXMLNode *VRTSimpleSource::SerializeTo
     if ( strstr(poDS->GetDescription(), "/vsicurl/http") != NULL ||
          strstr(poDS->GetDescription(), "/vsicurl/ftp") != NULL )
     {
-        /* Testing the existence of remote ressources can be excruciating */
+        /* Testing the existence of remote resources can be excruciating */
         /* slow, so let's just suppose they exist */
         pszRelativePath = poDS->GetDescription();
         bRelativeToVRT = FALSE;
@@ -469,7 +469,7 @@ void VRTSimpleSource::GetFileList(char**
         if ( strstr(pszFilename, "/vsicurl/http") != NULL ||
              strstr(pszFilename, "/vsicurl/ftp") != NULL )
         {
-            /* Testing the existence of remote ressources can be excruciating */
+            /* Testing the existence of remote resources can be excruciating */
             /* slow, so let's just suppose they exist */
         }
         else
--- a/ogr/ogrsf_frmts/edigeo/drv_edigeo.html
+++ b/ogr/ogrsf_frmts/edigeo/drv_edigeo.html
@@ -22,7 +22,7 @@ The driver must be provided with the .TH
 read the associated .DIC, .GEO, .SCD, .QAL and .VEC files.<p>
 
 In order the SRS of the layers to be correctly built, the IGNF file that contains
-the defintion of IGN SRS must be placed in the directory of PROJ.4 ressource files.<p>
+the defintion of IGN SRS must be placed in the directory of PROJ.4 resource files.<p>
 
 The whole set of files will be parsed into memory. This may be a limitation if dealing with
 big EDIGEO exchanges.<p>
@@ -56,7 +56,7 @@ according to the value of xxx=OBJ_OBJ_LN
 <ul>
 <li> <a href="http://georezo.net/wiki/main/donnees/edigeo">Introduction to the EDIGEO standard</a> (in French)
 <li> <a href="http://georezo.net/wiki/_media/main/geomatique/norme_edigeo.zip">EDIGEO standard - AFNOR NF Z 52000</a> (in French)
-<li> <a href="http://www.craig.fr/contenu/ressources/dossiers/pci/pdf/EDIGeO_PCI.pdf">Standard d'&eacute;change des objets du PCI selon la norme EDIGEO</a> (in French)
+<li> <a href="http://www.craig.fr/contenu/resources/dossiers/pci/pdf/EDIGeO_PCI.pdf">Standard d'&eacute;change des objets du PCI selon la norme EDIGEO</a> (in French)
 <li> <a href="http://www.cadastre.gouv.fr">Homepage of the French Digital Cadastral Plan</a> (in French)
 <li> <a href="http://docs.codehaus.org/pages/viewpage.action?pageId=77692976">Geotools EDIGEO module description</a> (in English)
 <li> <a href="http://svn.geotools.org/trunk/modules/unsupported/edigeo/src/test/resources/org/geotools/data/edigeo/test-data/">Sample of EDIGEO data</a>
--- a/ogr/ogrsf_frmts/edigeo/ogredigeodatasource.cpp
+++ b/ogr/ogrsf_frmts/edigeo/ogredigeodatasource.cpp
@@ -271,7 +271,7 @@ int OGREDIGEODataSource::ReadGEO()
             poSRS->importFromProj4("+proj=lcc +lat_1=44 +lat_2=49 +lat_0=46.5 +lon_0=3 +x_0=700000 +y_0=6600000 +ellps=GRS81 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs");
         else
         {
-            CPLDebug("EDIGEO", "Cannot resolve %s SRS. Check that the IGNF file is in the directory of PROJ.4 ressource files", osREL.c_str());
+            CPLDebug("EDIGEO", "Cannot resolve %s SRS. Check that the IGNF file is in the directory of PROJ.4 resource files", osREL.c_str());
             delete poSRS;
             poSRS = NULL;
         }
--- a/port/cpl_vsil_curl.cpp
+++ b/port/cpl_vsil_curl.cpp
@@ -2630,9 +2630,9 @@ char** VSICurlFilesystemHandler::ReadDir
  * A special file handler is installed that allows reading on-the-fly of files
  * available through HTTP/FTP web protocols, without downloading the entire file.
  *
- * Recognized filenames are of the form /vsicurl/http://path/to/remote/ressource or
- * /vsicurl/ftp://path/to/remote/ressource where path/to/remote/ressource is the
- * URL of a remote ressource.
+ * Recognized filenames are of the form /vsicurl/http://path/to/remote/resource or
+ * /vsicurl/ftp://path/to/remote/resource where path/to/remote/resource is the
+ * URL of a remote resource.
  *
  * Partial downloads (requires the HTTP server to support random reading) are done
  * with a 16 KB granularity by default. If the driver detects sequential reading
--- a/port/cpl_vsil_curl_streaming.cpp
+++ b/port/cpl_vsil_curl_streaming.cpp
@@ -1440,9 +1440,9 @@ int VSICurlStreamingFSHandler::Stat( con
  * be efficient. If you need efficient random access and that the server supports range
  * dowloading, you should use the /vsicurl/ file system handler instead.
  *
- * Recognized filenames are of the form /vsicurl_streaming/http://path/to/remote/ressource or
- * /vsicurl_streaming/ftp://path/to/remote/ressource where path/to/remote/ressource is the
- * URL of a remote ressource.
+ * Recognized filenames are of the form /vsicurl_streaming/http://path/to/remote/resource or
+ * /vsicurl_streaming/ftp://path/to/remote/resource where path/to/remote/resource is the
+ * URL of a remote resource.
  *
  * The GDAL_HTTP_PROXY, GDAL_HTTP_PROXYUSERPWD and GDAL_PROXY_AUTH configuration options can be
  * used to define a proxy server. The syntax to use is the one of Curl CURLOPT_PROXY,
