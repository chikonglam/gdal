Description: Fix 'inconsistant' typo, replace with 'inconsistent'.
Author: Bas Couwenberg <sebastic@xs4all.nl>
Forwarded: http://trac.osgeo.org/gdal/ticket/5995

--- a/MIGRATION_GUIDE.TXT
+++ b/MIGRATION_GUIDE.TXT
@@ -227,7 +227,7 @@ OGR drivers :
 
   * Due to RFC 41, if a OGR driver calls SetGeomType(wkbNone) on a layer,
     it will be impossible to affect geometries to features of that layer.
-    This worked before, although it was inconsistant, but it does no longer now.
+    This worked before, although it was inconsistent, but it does no longer now.
     In the developmenet of RFC 41, the CSV and VRT drivers have been upgraded
     to fix such errors.
 
--- a/frmts/openjpeg/frmt_jp2openjpeg.html
+++ b/frmts/openjpeg/frmt_jp2openjpeg.html
@@ -204,11 +204,11 @@ be written. Defaults to NO.
 <li><p><b>USE_SRC_CODESTREAM=YES/NO</b>: (GDAL &gt;= 2.0)
 (EXPERIMENTAL!) When source dataset is JPEG2000, whether to reuse the codestream
 of the source dataset unmodified. Defaults to NO. Note that enabling that feature might result
-in inconsistant content of the JP2 boxes w.r.t. to the content of the source codestream.
+in inconsistent content of the JP2 boxes w.r.t. to the content of the source codestream.
 Most other creation options will be ignored in that mode. Can be usefull in some
 use cases when adding/correcting georeferencing, metadata, ... INSPIRE_TG and
 PROFILE options will be ignored, and the profile of the codestream will be overriden
-with the one specified/implied by the options (which may be inconsistant with
+with the one specified/implied by the options (which may be inconsistent with
 the characteristics of the codestream).
 </p></li>
 
--- a/frmts/openjpeg/openjpegdataset.cpp
+++ b/frmts/openjpeg/openjpegdataset.cpp
@@ -2412,7 +2412,7 @@ GDALDataset * JP2OpenJPEGDataset::Create
         (GDALGetDataTypeSize(eDataType) == 32 && (nBits <= 16 || nBits > 32)) )
     {
         CPLError(CE_Warning, CPLE_NotSupported,
-                 "Inconsistant NBITS value with data type. Using %d",
+                 "Inconsistent NBITS value with data type. Using %d",
                  GDALGetDataTypeSize(eDataType));
     }
 
--- a/gcore/gdaldataset.cpp
+++ b/gcore/gdaldataset.cpp
@@ -3383,7 +3383,7 @@ OGRLayer *GDALDataset::CreateLayer( cons
         !poLayer->TestCapability(OLCCurveGeometries) )
     {
         CPLError( CE_Warning, CPLE_AppDefined,
-                  "Inconsistant driver: Layer geometry type is non-linear, but "
+                  "Inconsistent driver: Layer geometry type is non-linear, but "
                   "TestCapability(OLCCurveGeometries) returns FALSE." );
     }
 #endif
--- a/ogr/ogrsf_frmts/gpkg/ogrgeopackagetablelayer.cpp
+++ b/ogr/ogrsf_frmts/gpkg/ogrgeopackagetablelayer.cpp
@@ -1130,7 +1130,7 @@ OGRErr OGRGeoPackageTableLayer::ICreateF
                 poFeature->GetFieldAsInteger64(m_iFIDAsRegularColumnIndex) != poFeature->GetFID() )
             {
                 CPLError(CE_Failure, CPLE_AppDefined,
-                            "Inconsistant values of FID and field of same name");
+                            "Inconsistent values of FID and field of same name");
                 return CE_Failure;
             }
         }
@@ -1251,7 +1251,7 @@ OGRErr OGRGeoPackageTableLayer::ISetFeat
             poFeature->GetFieldAsInteger64(m_iFIDAsRegularColumnIndex) != poFeature->GetFID() )
         {
             CPLError(CE_Failure, CPLE_AppDefined,
-                        "Inconsistant values of FID and field of same name");
+                        "Inconsistent values of FID and field of same name");
             return CE_Failure;
         }
     }
--- a/ogr/ogrsf_frmts/pg/ogrpgtablelayer.cpp
+++ b/ogr/ogrsf_frmts/pg/ogrpgtablelayer.cpp
@@ -1105,7 +1105,7 @@ OGRErr OGRPGTableLayer::ISetFeature( OGR
             poFeature->GetFieldAsInteger64(iFIDAsRegularColumnIndex) != poFeature->GetFID() )
         {
             CPLError(CE_Failure, CPLE_AppDefined,
-                        "Inconsistant values of FID and field of same name");
+                        "Inconsistent values of FID and field of same name");
             return CE_Failure;
         }
     }
@@ -1319,7 +1319,7 @@ OGRErr OGRPGTableLayer::ICreateFeature(
                 poFeature->GetFieldAsInteger64(iFIDAsRegularColumnIndex) != poFeature->GetFID() )
             {
                 CPLError(CE_Failure, CPLE_AppDefined,
-                            "Inconsistant values of FID and field of same name");
+                            "Inconsistent values of FID and field of same name");
                 return CE_Failure;
             }
         }
--- a/ogr/ogrsf_frmts/pgdump/ogrpgdumplayer.cpp
+++ b/ogr/ogrsf_frmts/pgdump/ogrpgdumplayer.cpp
@@ -158,7 +158,7 @@ OGRErr OGRPGDumpLayer::ICreateFeature( O
                 poFeature->GetFieldAsInteger64(iFIDAsRegularColumnIndex) != poFeature->GetFID() )
             {
                 CPLError(CE_Failure, CPLE_AppDefined,
-                            "Inconsistant values of FID and field of same name");
+                            "Inconsistent values of FID and field of same name");
                 return CE_Failure;
             }
         }
--- a/ogr/ogrsf_frmts/shape/shpopen.c
+++ b/ogr/ogrsf_frmts/shape/shpopen.c
@@ -1792,7 +1792,7 @@ SHPReadObject( SHPHandle psSHP, int hEnt
         {
             char str[128];
             sprintf( str,
-                    "Sanity check failed when trying to recover from inconsistant .shx/.shp with shape %d",
+                    "Sanity check failed when trying to recover from inconsistent .shx/.shp with shape %d",
                     hEntity );
 
             psSHP->sHooks.Error( str );
--- a/ogr/ogrsf_frmts/sqlite/ogrsqlitetablelayer.cpp
+++ b/ogr/ogrsf_frmts/sqlite/ogrsqlitetablelayer.cpp
@@ -2585,7 +2585,7 @@ OGRErr OGRSQLiteTableLayer::ISetFeature(
             poFeature->GetFieldAsInteger64(iFIDAsRegularColumnIndex) != poFeature->GetFID() )
         {
             CPLError(CE_Failure, CPLE_AppDefined,
-                        "Inconsistant values of FID and field of same name");
+                        "Inconsistent values of FID and field of same name");
             return CE_Failure;
         }
     }
@@ -2946,7 +2946,7 @@ OGRErr OGRSQLiteTableLayer::ICreateFeatu
                 poFeature->GetFieldAsInteger64(iFIDAsRegularColumnIndex) != poFeature->GetFID() )
             {
                 CPLError(CE_Failure, CPLE_AppDefined,
-                            "Inconsistant values of FID and field of same name");
+                            "Inconsistent values of FID and field of same name");
                 return CE_Failure;
             }
         }
--- a/swig/python/samples/validate_jp2.py
+++ b/swig/python/samples/validate_jp2.py
@@ -291,7 +291,7 @@ def check_geojp2_gmljp2_consistency(file
             if abs(geojp2_gt[i] - gmljp2_gt[i] > 1e-8):
                 diff = True
         if diff:
-            error_report.EmitError('GENERAL', 'Inconsistant geotransform between GeoJP2 (%s) and GMLJP2 (%s)' % (str(geojp2_gt), str(gmljp2_gt)))
+            error_report.EmitError('GENERAL', 'Inconsistent geotransform between GeoJP2 (%s) and GMLJP2 (%s)' % (str(geojp2_gt), str(gmljp2_gt)))
 
     geojp2_sr = osr.SpatialReference()
     geojp2_sr.ImportFromWkt(geojp2_wkt)
@@ -303,7 +303,7 @@ def check_geojp2_gmljp2_consistency(file
         geojp2_proj4 = geojp2_sr.ExportToProj4()
         gmljp2_proj4 = gmljp2_sr.ExportToProj4()
         if geojp2_proj4 != gmljp2_proj4:
-            error_report.EmitError('GENERAL', 'Inconsistant SRS between GeoJP2 (wkt=%s, proj4=%s) and GMLJP2 (wkt=%s, proj4=%s)' % (geojp2_wkt, geojp2_proj4, gmljp2_wkt, gmljp2_proj4))
+            error_report.EmitError('GENERAL', 'Inconsistent SRS between GeoJP2 (wkt=%s, proj4=%s) and GMLJP2 (wkt=%s, proj4=%s)' % (geojp2_wkt, geojp2_proj4, gmljp2_wkt, gmljp2_proj4))
 
 
 # Check consistency of georeferencing of OrthoimageCoverage with the one embedded in the JPEG2000 file
@@ -363,7 +363,7 @@ def check_oi_rg_consistency(filename, se
             if abs(oi_gt[i] - gt[i] > 1e-8):
                 diff = True
         if diff:
-            error_report.EmitError('INSPIRE_TG', 'Inconsistant geotransform between OrthoImagery (%s) and GMLJP2/GeoJP2 (%s)' % (str(oi_gt), str(gt)), conformance_class = 'A.8.8')
+            error_report.EmitError('INSPIRE_TG', 'Inconsistent geotransform between OrthoImagery (%s) and GMLJP2/GeoJP2 (%s)' % (str(oi_gt), str(gt)), conformance_class = 'A.8.8')
 
     sr = osr.SpatialReference()
     sr.ImportFromWkt(wkt)
@@ -375,7 +375,7 @@ def check_oi_rg_consistency(filename, se
         proj4 = sr.ExportToProj4()
         oi_proj4 = oi_sr.ExportToProj4()
         if proj4 != oi_proj4:
-            error_report.EmitError('INSPIRE_TG', 'Inconsistant SRS between OrthoImagery (wkt=%s, proj4=%s) and GMLJP2/GeoJP2 (wkt=%s, proj4=%s)' % (wkt, proj4, oi_wkt, oi_proj4), conformance_class = 'A.8.8')
+            error_report.EmitError('INSPIRE_TG', 'Inconsistent SRS between OrthoImagery (wkt=%s, proj4=%s) and GMLJP2/GeoJP2 (wkt=%s, proj4=%s)' % (wkt, proj4, oi_wkt, oi_proj4), conformance_class = 'A.8.8')
 
 def validate(filename, oidoc, inspire_tg, expected_gmljp2, ogc_schemas_location, datatype = 'imagery', error_report = None):
 
