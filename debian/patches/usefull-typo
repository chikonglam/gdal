Description: Fix 'usefull' typo, replace with 'useful'.
Author: Bas Couwenberg <sebastic@xs4all.nl>
Forwarded: http://trac.osgeo.org/gdal/ticket/5995
Applied-Upstream: https://trac.osgeo.org/gdal/changeset/29330

--- a/NEWS
+++ b/NEWS
@@ -818,7 +818,7 @@ Shapefile driver:
  * make REPACK compact .shp if SetFeature() is called and changes one geometry size (#5706)
  * add check not to cut unicode character while cut the string lengnt for field max length during SetFeature
  * avoid reading whole .shx at open time for /vsicurl/
- * add SHAPE_REWIND_ON_WRITE configuration option that can be set to NO to disable correction of ring winding order on write. Usefull when dealing with MultiPolygon that are MultiPatch objects in fact (#5888)
+ * add SHAPE_REWIND_ON_WRITE configuration option that can be set to NO to disable correction of ring winding order on write. Useful when dealing with MultiPolygon that are MultiPatch objects in fact (#5888)
  * Make ENCODING layer creation option prioritary over SHAPE_ENCODING config. option
 
 SOSI driver:
@@ -1064,8 +1064,8 @@ Utilities:
  * gdal_translate: fix output file naming scheme in gdal_translate -sds (#5119)
  * gdal_translate: fix logic in detection non-gray color table level (#5245)
  * gdal_translate: add a -norat option
- * gdal_translate: don't add 0.1 when -scale is used with a dstmin equal to dstmax (usefull to generate a raster with uniform color, i.e. scaleRatio = 0)
- * gdal_translate: use floor() to compute image coordinates from world coordinates when specifying -projwin (usefull when extracting from left or top of upper-left corner, which generate negative image coordinates) (#5367)
+ * gdal_translate: don't add 0.1 when -scale is used with a dstmin equal to dstmax (useful to generate a raster with uniform color, i.e. scaleRatio = 0)
+ * gdal_translate: use floor() to compute image coordinates from world coordinates when specifying -projwin (useful when extracting from left or top of upper-left corner, which generate negative image coordinates) (#5367)
  * gdaltindex: remove annoying warning 'Warning 1: Field location of width 255 truncated to 254' (#5121)
  * gdaltindex: add -src_srs_name and -src_srs_format to go with MapServer RFC100; add also a -f and -lyr_name options to be able to create a non-shapefile tileindex
  * gdalwarp: Fix segfault where metadata values weren't being nullchecked properly during conflict resolution (#5069)
@@ -1354,7 +1354,7 @@ Core:
  * introduce OGRLayer::FindFieldIndex() / OGR_L_FindFieldIndex() to lookup potentially laundered field names (RFC 42)
  * OGR SQL: upgrade to support RFC 41 (multiple geometry fields)
  * OGR SQL: more stricter checks
- * OGR SQL: make parsing error report a usefull hint where the syntax error occured
+ * OGR SQL: make parsing error report a useful hint where the syntax error occured
  * OGR SQL: fix thread-safety of swq_op_registrar::GetOperator() (#5196)
  * OGR SQL: support not explicitly specifying AS keyword for aliasing a column spec
  * OGR SQL: don't call CONCAT(a_column ...) or SUBSTR(a_column ...) as a_column
@@ -1513,7 +1513,7 @@ LIBKML driver:
  * when writing a .kmz file, put layers .kml docs into a layers/ subdirectory
  * fix mem leaks, and use after free in kml2FeatureDef() (#5240)
  * create document with default namespace set to http://www.opengis.net/kml/2.2
- * when writing, consider empty strings as unset (usefull when converting from CSV)
+ * when writing, consider empty strings as unset (useful when converting from CSV)
  * don't write empty <Style /> element if OGR_STYLE is empty string
  * transform multigeometry with one single component into single geometry
  * create libkml/ subdirectory entry in .kmz
@@ -3511,7 +3511,7 @@ Port:
 Core:
  * RFC 24: progressive/async raster reading
  * On Unix, add capability of opening the target of a symlink through GDALOpen()
-   even if it not a real filename. Usefull for opening resources expressed as
+   even if it not a real filename. Useful for opening resources expressed as
    GDAL virtual filenames in software offering only file explorers (#3902)
  * Assume anything less than 100000 for GDAL_CACHEMAX is measured in metabytes.
  * Read cartesian coordinates if applicable in GDALLoadOziMapFile().
@@ -3931,7 +3931,7 @@ Core:
  * Add OGRLayer::GetName() and OGRLayer::GetGeomType() virtual methods,
    and their C and SWIG mappings (#3719)
  * On Unix, add capability of opening the target of a symlink through OGROpen()
-   even if it not a real filename. Usefull for opening resources expressed as
+   even if it not a real filename. Useful for opening resources expressed as
    GDAL virtual filenames in software offering only file explorers (#3902)
  * Expat based XML readers : add support for reading files with Windows-1252
    encoding
--- a/apps/ogr_utilities.dox
+++ b/apps/ogr_utilities.dox
@@ -266,7 +266,7 @@ types.
 Add "25D" to the name to get 2.5D versions.
 Starting with GDAL 1.10, PROMOTE_TO_MULTI can be used to automatically promote layers
 that mix polygon or multipolygons to multipolygons, and layers that mix linestrings or
-multilinestrings to multilinestrings. Can be usefull when converting shapefiles to PostGIS
+multilinestrings to multilinestrings. Can be useful when converting shapefiles to PostGIS
 (and other target drivers) that implements strict checks for geometry type.
 Starting with GDAL 2.0, CONVERT_TO_LINEAR can be used to to convert non-linear geometries
 types into linear geometries by approximating them.</dd>
--- a/man/man1/ogr2ogr.1
+++ b/man/man1/ogr2ogr.1
@@ -97,7 +97,7 @@ Layer creation option (format specific)
 .IP "\fB\fB-nln\fP\fI name\fP:\fP" 1c
 Assign an alternate name to the new layer 
 .IP "\fB\fB-nlt\fP\fI type\fP:\fP" 1c
-Define the geometry type for the created layer. One of NONE, GEOMETRY, POINT, LINESTRING, POLYGON, GEOMETRYCOLLECTION, MULTIPOINT, MULTIPOLYGON or MULTILINESTRING. And CIRCULARSTRING, COMPOUNDCURVE, CURVEPOLYGON, MULTICURVE and MULTISURFACE for GDAL 2.0 non-linear geometry types. Add '25D' to the name to get 2.5D versions. Starting with GDAL 1.10, PROMOTE_TO_MULTI can be used to automatically promote layers that mix polygon or multipolygons to multipolygons, and layers that mix linestrings or multilinestrings to multilinestrings. Can be usefull when converting shapefiles to PostGIS (and other target drivers) that implements strict checks for geometry type. Starting with GDAL 2.0, CONVERT_TO_LINEAR can be used to to convert non-linear geometries types into linear geometries by approximating them. 
+Define the geometry type for the created layer. One of NONE, GEOMETRY, POINT, LINESTRING, POLYGON, GEOMETRYCOLLECTION, MULTIPOINT, MULTIPOLYGON or MULTILINESTRING. And CIRCULARSTRING, COMPOUNDCURVE, CURVEPOLYGON, MULTICURVE and MULTISURFACE for GDAL 2.0 non-linear geometry types. Add '25D' to the name to get 2.5D versions. Starting with GDAL 1.10, PROMOTE_TO_MULTI can be used to automatically promote layers that mix polygon or multipolygons to multipolygons, and layers that mix linestrings or multilinestrings to multilinestrings. Can be useful when converting shapefiles to PostGIS (and other target drivers) that implements strict checks for geometry type. Starting with GDAL 2.0, CONVERT_TO_LINEAR can be used to to convert non-linear geometries types into linear geometries by approximating them. 
 .IP "\fB\fB-dim\fP\fI val\fP:\fP" 1c
 (starting with GDAL 1.10) Force the coordinate dimension to val (valid values are 2 or 3). This affects both the layer geometry type, and feature geometries. Starting with GDAL 1.11, the value can be set to 'layer_dim' to instruct feature geometries to be promoted to the coordinate dimension declared by the layer.  
 .IP "\fB\fB-a_srs\fP\fI srs_def\fP:\fP" 1c
--- a/frmts/openjpeg/frmt_jp2openjpeg.html
+++ b/frmts/openjpeg/frmt_jp2openjpeg.html
@@ -110,7 +110,7 @@ are unable to open such files. And regar
 </p></li>
 
 <li><p><b>ALPHA=YES/NO</b>: (GDAL &gt;= 2.0) Whether to force encoding last
-channel as alpha channel. Only usefull if the color interpretation of that channel
+channel as alpha channel. Only useful if the color interpretation of that channel
 is not already Alpha. Defaults to NO.</p></li>
 
 <li><p><b>PROFILE=AUTO/UNRESTRICTED/PROFILE_1</b>: (GDAL &gt;= 2.0) Determine
@@ -205,7 +205,7 @@ be written. Defaults to NO.
 (EXPERIMENTAL!) When source dataset is JPEG2000, whether to reuse the codestream
 of the source dataset unmodified. Defaults to NO. Note that enabling that feature might result
 in inconsistent content of the JP2 boxes w.r.t. to the content of the source codestream.
-Most other creation options will be ignored in that mode. Can be usefull in some
+Most other creation options will be ignored in that mode. Can be useful in some
 use cases when adding/correcting georeferencing, metadata, ... INSPIRE_TG and
 PROFILE options will be ignored, and the profile of the codestream will be overriden
 with the one specified/implied by the options (which may be inconsistent with
--- a/gcore/gdalrasterblock.cpp
+++ b/gcore/gdalrasterblock.cpp
@@ -393,7 +393,7 @@ int GDALRasterBlock::FlushCacheBlock(int
  * \brief Flush all dirty blocks from cache.
  *
  * This static method is normally used to recover memory and is especially
- * usefull when doing multi-threaded code that can trigger the block cache.
+ * useful when doing multi-threaded code that can trigger the block cache.
  *
  * Due to the current design of the block cache, dirty blocks belonging to a same
  * dataset could be pushed simultanously to the IWriteBlock() method of that
--- a/ogr/ogrsf_frmts/csv/drv_csv.html
+++ b/ogr/ogrsf_frmts/csv/drv_csv.html
@@ -148,7 +148,7 @@ Starting with GDAL 2.0, the following op
 (typically with the -oo name=value parameters of ogrinfo or ogr2ogr):
 <ul>
 <li><b>MERGE_SEPARATOR</b>=YES/NO (defaults to NO). Setting it to YES will
-enable merging consecutive separators. Mostly usefull when it is the space
+enable merging consecutive separators. Mostly useful when it is the space
 character.</li>
 <li><b>AUTODETECT_TYPE</b>=YES/NO (defaults to NO). Setting it to YES will
 enable auto-detection of field data types. If while reading the records
--- a/ogr/ogrsf_frmts/gpkg/ogrgeopackagelayer.cpp
+++ b/ogr/ogrsf_frmts/gpkg/ogrgeopackagelayer.cpp
@@ -356,7 +356,7 @@ void OGRGeoPackageLayer::BuildFeatureDef
         const char * pszDeclType = sqlite3_column_decltype(hStmt, iCol);
 
         // Recognize a geometry column from trying to build the geometry
-        // Usefull for OGRSQLiteSelectLayer
+        // Useful for OGRSQLiteSelectLayer
         if( nColType == SQLITE_BLOB && m_poFeatureDefn->GetGeomFieldCount() == 0 )
         {
             const int nBytes = sqlite3_column_bytes( hStmt, iCol );
--- a/port/cpl_error.cpp
+++ b/port/cpl_error.cpp
@@ -537,7 +537,7 @@ void CPL_STDCALL CPLErrorReset()
 /**
  * Restore an error state, without emitting an error.
  *
- * Can be usefull if a routine might call CPLErrorReset() and one wants to
+ * Can be useful if a routine might call CPLErrorReset() and one wants to
  * preserve the previous error state.
  *
  * @since GDAL 2.0
