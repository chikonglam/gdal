Description: Fix 'explicitely' typo, replace with 'explicitly'.
Author: Bas Couwenberg <sebastic@debian.org>
Forwarded: http://trac.osgeo.org/gdal/ticket/5756
Applied-Upstream: 2.0, http://trac.osgeo.org/gdal/changeset/28039

--- a/NEWS
+++ b/NEWS
@@ -1787,7 +1787,7 @@ GML driver:
  * Allow reading srsDimension attribute when set on LineString element, and not on posList (#4663)
  * Partial support for reading GML 3.3 compat encoding profile, limited to <gmlce:SimplePolygon>, <gmlce:SimpleRectangle>, <gmlce:SimpleTriangle>, <gmlce:SimpleMultiPoint> elements
  * Support WFS GetFeature response document to be piped and opened with /vsistdin/
- * Support specifying connection string as 'filename.gml,xsd=some_filename.xsd' to explicitely provide a XSD
+ * Support specifying connection string as 'filename.gml,xsd=some_filename.xsd' to explicitly provide a XSD
  * Improve detection of extent and srs for WFS 2.0
  * Allow ISO-8859-15 encoded files to be used by Expat parser (#4829)
  * Handle CompositeCurve like MultiCurve (for NAS)
@@ -2588,7 +2588,7 @@ Core:
  * OGR SQL: recognize optional ESCAPE escape_char clause
  * OGR SQL: allow NULL to be used as a value, so that 'SELECT *, NULL FROM foo works'
  * OGR SQL: Accept doublequoting of column_name in 'SELECT DISTINCT "column_name" FROM table_name' (#3966)
- * OGR SQL: OGRGenSQLResultsLayer: if the dialect is explicitely set to OGRSQL, don't propagate the WHERE clause of the SELECT to the source layer, but evaluate it instead at the OGRGenSQLResultsLayer level (#4022)
+ * OGR SQL: OGRGenSQLResultsLayer: if the dialect is explicitly set to OGRSQL, don't propagate the WHERE clause of the SELECT to the source layer, but evaluate it instead at the OGRGenSQLResultsLayer level (#4022)
  * OGR SQL: Avoid error emission on requests such as 'SELECT MIN(EAS_ID), COUNT(*) FROM POLY'
  * OGR SQL: Avoid setting width/precision for AVG column
  * OGR SQL: Add a mechanism to delete a layer (DROP TABLE x)
--- a/apps/gdal_rasterize.cpp
+++ b/apps/gdal_rasterize.cpp
@@ -341,7 +341,7 @@ GDALDatasetH CreateOutputDataset(std::ve
             }
 
             /* When rasterizing point layers and that the bounds have */
-            /* not been explicitely set, voluntary increase the extent by */
+            /* not been explicitly set, voluntary increase the extent by */
             /* a half-pixel size to avoid missing points on the border */
             if (wkbFlatten(OGR_L_GetGeomType(hLayer)) == wkbPoint &&
                 !bTargetAlignedPixels && dfXRes != 0 && dfYRes != 0)
@@ -479,7 +479,7 @@ int main( int argc, char ** argv )
     double dfXRes = 0, dfYRes = 0;
     int bCreateOutput = FALSE;
     const char* pszFormat = "GTiff";
-    int bFormatExplicitelySet = FALSE;
+    int bFormatExplicitlySet = FALSE;
     char **papszCreateOptions = NULL;
     GDALDriverH hDriver = NULL;
     GDALDataType eOutputType = GDT_Float64;
@@ -607,7 +607,7 @@ int main( int argc, char ** argv )
         else if( EQUAL(argv[i],"-of") && i < argc-1 )
         {
             pszFormat = argv[++i];
-            bFormatExplicitelySet = TRUE;
+            bFormatExplicitlySet = TRUE;
             bCreateOutput = TRUE;
         }
         else if( EQUAL(argv[i],"-init") && i < argc - 1 )
@@ -859,7 +859,7 @@ int main( int argc, char ** argv )
             exit( 1 );
         }
 
-        if (!bQuiet && !bFormatExplicitelySet)
+        if (!bQuiet && !bFormatExplicitlySet)
             CheckExtensionConsistency(pszDstFilename, pszFormat);
     }
     else
--- a/frmts/ctg/ctgdataset.cpp
+++ b/frmts/ctg/ctgdataset.cpp
@@ -360,7 +360,7 @@ int CTGDataset::Identify( GDALOpenInfo *
 
     GDALOpenInfo* poOpenInfoToDelete = NULL;
     /*  GZipped grid_cell.gz files are common, so automagically open them */
-    /*  if the /vsigzip/ has not been explicitely passed */
+    /*  if the /vsigzip/ has not been explicitly passed */
     const char* pszFilename = CPLGetFilename(poOpenInfo->pszFilename);
     if ((EQUAL(pszFilename, "grid_cell.gz") ||
          EQUAL(pszFilename, "grid_cell1.gz") ||
@@ -431,7 +431,7 @@ GDALDataset *CTGDataset::Open( GDALOpenI
     CPLString osFilename(poOpenInfo->pszFilename);
 
     /*  GZipped grid_cell.gz files are common, so automagically open them */
-    /*  if the /vsigzip/ has not been explicitely passed */
+    /*  if the /vsigzip/ has not been explicitly passed */
     const char* pszFilename = CPLGetFilename(poOpenInfo->pszFilename);
     if ((EQUAL(pszFilename, "grid_cell.gz") ||
          EQUAL(pszFilename, "grid_cell1.gz") ||
--- a/frmts/ecw/ecwasyncreader.cpp
+++ b/frmts/ecw/ecwasyncreader.cpp
@@ -281,7 +281,7 @@ NCSEcwReadStatus ECWAsyncReader::Refresh
             poReader->bComplete = TRUE;
     }
 
-    /* Call CPLCleanupTLS explicitely since this thread isn't managed */
+    /* Call CPLCleanupTLS explicitly since this thread isn't managed */
     /* by CPL. This will free the ressources taken by the above CPLDebug */
     if( poReader->bComplete )
         CPLCleanupTLS();
--- a/frmts/hf2/hf2dataset.cpp
+++ b/frmts/hf2/hf2dataset.cpp
@@ -330,7 +330,7 @@ int HF2Dataset::Identify( GDALOpenInfo *
 
     GDALOpenInfo* poOpenInfoToDelete = NULL;
     /*  GZipped .hf2 files are common, so automagically open them */
-    /*  if the /vsigzip/ has not been explicitely passed */
+    /*  if the /vsigzip/ has not been explicitly passed */
     CPLString osFilename(poOpenInfo->pszFilename);
     if ((EQUAL(CPLGetExtension(poOpenInfo->pszFilename), "hfz") ||
         (strlen(poOpenInfo->pszFilename) > 6 &&
@@ -374,7 +374,7 @@ GDALDataset *HF2Dataset::Open( GDALOpenI
 
     GDALOpenInfo* poOpenInfoToDelete = NULL;
     /*  GZipped .hf2 files are common, so automagically open them */
-    /*  if the /vsigzip/ has not been explicitely passed */
+    /*  if the /vsigzip/ has not been explicitly passed */
     CPLString osFilename(poOpenInfo->pszFilename);
     if ((EQUAL(CPLGetExtension(poOpenInfo->pszFilename), "hfz") ||
         (strlen(poOpenInfo->pszFilename) > 6 &&
--- a/frmts/jpeg/frmt_jpeg.html
+++ b/frmts/jpeg/frmt_jpeg.html
@@ -40,7 +40,7 @@ compressed tiles.<p>
 
 To be able to read and write JPEG images with 12-bit sample, you can build GDAL
 with its internal libjpeg (based on IJG libjpeg-6b, with additional changes for 12-bit
-sample support), or explicitely pass --with-jpeg12=yes to configure script when building
+sample support), or explicitly pass --with-jpeg12=yes to configure script when building
 with external libjpeg. See <a href="http://trac.osgeo.org/gdal/wiki/TIFF12BitJPEG">
 "8 and 12 bit JPEG in TIFF"</a> wiki page for more details.<p>
 
--- a/frmts/nitf/nitfdataset.cpp
+++ b/frmts/nitf/nitfdataset.cpp
@@ -606,7 +606,7 @@ GDALDataset *NITFDataset::OpenInternal(
         }
         else
         {
-            /* We explicitely list the allowed drivers to avoid hostile content */
+            /* We explicitly list the allowed drivers to avoid hostile content */
             /* to be opened by a random driver, and also to make sure that */
             /* a future new JPEG2000 compatible driver derives from GDALPamDataset */
             static const char * const apszDrivers[] = { "JP2KAK", "JP2ECW", "JP2MRSID",
@@ -4225,7 +4225,7 @@ NITFDataset::NITFCreateCopy(
 
                 if (CSLPartialFindString(papszFullOptions, "TRE=GEOLOB=") != - 1)
                 {
-                    CPLDebug("NITF", "GEOLOB TRE was explicitely defined before. "
+                    CPLDebug("NITF", "GEOLOB TRE was explicitly defined before. "
                              "Overriding it with current georefencing info.");
                 }
 
@@ -4252,7 +4252,7 @@ NITFDataset::NITFCreateCopy(
                 papszFullOptions = CSLAddString( papszFullOptions, osGEOLOB ) ;
 
 /* -------------------------------------------------------------------- */
-/*      Write GEOPSB TRE if not already explicitely provided            */
+/*      Write GEOPSB TRE if not already explicitly provided            */
 /* -------------------------------------------------------------------- */
                 if (CSLPartialFindString(papszFullOptions, "FILE_TRE=GEOPSB=") == -1 &&
                     CSLPartialFindString(papszFullOptions, "TRE=GEOPSB=") == -1)
@@ -4284,7 +4284,7 @@ NITFDataset::NITFCreateCopy(
                 }
                 else
                 {
-                    CPLDebug("NITF", "GEOPSB TRE was explicitely defined before. Keeping it.");
+                    CPLDebug("NITF", "GEOPSB TRE was explicitly defined before. Keeping it.");
                 }
 
             }
--- a/frmts/pdf/pdfdataset.cpp
+++ b/frmts/pdf/pdfdataset.cpp
@@ -2508,7 +2508,7 @@ void PDFDataset::TurnLayersOnOff()
                     oIter->second->setState(OptionalContentGroup::On);
                 }
 
-                // Turn child layers on, unless there's one of them explicitely listed
+                // Turn child layers on, unless there's one of them explicitly listed
                 // in the list.
                 size_t nLen = strlen(papszLayers[i]);
                 int bFoundChildLayer = FALSE;
@@ -4970,7 +4970,7 @@ CPLErr PDFDataset::SetGeoTransform(doubl
     bGeoTransformValid = TRUE;
     bProjDirty = TRUE;
 
-    /* Reset NEATLINE if not explicitely set by the user */
+    /* Reset NEATLINE if not explicitly set by the user */
     if (!bNeatLineDirty)
         SetMetadataItem("NEATLINE", NULL);
     return CE_None;
@@ -5153,7 +5153,7 @@ CPLErr PDFDataset::SetGCPs( int nGCPCoun
     
     bProjDirty = TRUE;
 
-    /* Reset NEATLINE if not explicitely set by the user */
+    /* Reset NEATLINE if not explicitly set by the user */
     if (!bNeatLineDirty)
         SetMetadataItem("NEATLINE", NULL);
 
--- a/frmts/xyz/xyzdataset.cpp
+++ b/frmts/xyz/xyzdataset.cpp
@@ -480,7 +480,7 @@ int XYZDataset::IdentifyEx( GDALOpenInfo
 
     GDALOpenInfo* poOpenInfoToDelete = NULL;
     /*  GZipped .xyz files are common, so automagically open them */
-    /*  if the /vsigzip/ has not been explicitely passed */
+    /*  if the /vsigzip/ has not been explicitly passed */
     if (strlen(poOpenInfo->pszFilename) > 6 &&
         EQUAL(poOpenInfo->pszFilename + strlen(poOpenInfo->pszFilename) - 6, "xyz.gz") &&
         !EQUALN(poOpenInfo->pszFilename, "/vsigzip/", 9))
@@ -612,7 +612,7 @@ GDALDataset *XYZDataset::Open( GDALOpenI
     CPLString osFilename(poOpenInfo->pszFilename);
 
     /*  GZipped .xyz files are common, so automagically open them */
-    /*  if the /vsigzip/ has not been explicitely passed */
+    /*  if the /vsigzip/ has not been explicitly passed */
     if (strlen(poOpenInfo->pszFilename) > 6 &&
         EQUAL(poOpenInfo->pszFilename + strlen(poOpenInfo->pszFilename) - 6, "xyz.gz") &&
         !EQUALN(poOpenInfo->pszFilename, "/vsigzip/", 9))
--- a/gcore/gdaldataset.cpp
+++ b/gcore/gdaldataset.cpp
@@ -2381,7 +2381,7 @@ GDALDatasetH GDALOpenInternal( GDALOpenI
  * Starting with GDAL 1.6.0, if GDALOpenShared() is called on the same pszFilename
  * from two different threads, a different GDALDataset object will be returned as
  * it is not safe to use the same dataset from different threads, unless the user
- * does explicitely use mutexes in its code.
+ * does explicitly use mutexes in its code.
  *
  * For drivers supporting the VSI virtual file API, it is possible to open
  * a file in a .zip archive (see VSIInstallZipFileHandler()), in a .tar/.tar.gz/.tgz archive
--- a/ogr/ogrsf_frmts/generic/ogr_gensql.cpp
+++ b/ogr/ogrsf_frmts/generic/ogr_gensql.cpp
@@ -152,7 +152,7 @@ OGRGenSQLResultsLayer::OGRGenSQLResultsL
     poSrcLayer = papoTableLayers[0];
 
 /* -------------------------------------------------------------------- */
-/*      If the user has explicitely requested a OGRSQL dialect, then    */
+/*      If the user has explicitly requested a OGRSQL dialect, then    */
 /*      we should avoid to forward the where clause to the source layer */
 /*      when there is a risk it cannot understand it (#4022)            */
 /* -------------------------------------------------------------------- */
--- a/ogr/ogrsf_frmts/gml/drv_gml.html
+++ b/ogr/ogrsf_frmts/gml/drv_gml.html
@@ -312,7 +312,7 @@ the layers must be read in the order the
 If no .xsd and .gfs files are found, the parser will detect the layout of layers when
 building the .gfs file. If the layers are found to be sequential, a <i>&lt;SequentialLayers&gt;true&lt;/SequentialLayers&gt;</i>
 element will be written in the .gfs file, so that the GML_READ_MODE will be automatically
-initialized to MONOBLOCK_LAYERS if not explicitely set by the user.<p>
+initialized to MONOBLOCK_LAYERS if not explicitly set by the user.<p>
 
 Starting with OGR 1.9.0, the GML_READ_MODE configuration option can be set to INTERLEAVED_LAYERS to be able
 to read a GML file whose features from different layers are interleaved. In the case, the semantics of the
--- a/ogr/ogrsf_frmts/gpx/drv_gpx.html
+++ b/ogr/ogrsf_frmts/gpx/drv_gpx.html
@@ -275,7 +275,7 @@ ogr2ogr -f GPX output.gpx input.shp -sql
 <li>How to solve "ERROR 6: Cannot create GPX layer XXXXXX with unknown geometry type" ?<p>
 This error happens when the layer to create does not expose a precise geometry type, but just a generic
 wkbUnknown type. This is for example the case when using ogr2ogr with a SQL request to a PostgreSQL datasource.
-You must then explicitely specify -nlt POINT (or LINESTRING or MULTILINESTRING).
+You must then explicitly specify -nlt POINT (or LINESTRING or MULTILINESTRING).
 </li>
 
 
--- a/ogr/ogrsf_frmts/mdb/drv_mdb.html
+++ b/ogr/ogrsf_frmts/mdb/drv_mdb.html
@@ -47,7 +47,7 @@
   <li>If you didn't specify --with-jvm-lib-add-rpath at configure time, set the path of the directory that contains libjvm.so in LD_LIBRARY_PATH or in /etc/ld.so.conf.</li>
   <li>Download jackcess-1.2.2.jar, commons-lang-2.4.jar and commons-logging-1.1.1.jar (other versions might work)</li>
   <li>Put the 3 JARs either in the lib/ext directory of the JRE (e.g. /usr/lib/jvm/java-6-openjdk/jre/lib/ext) or in another directory
-  and explicitely point them with the CLASSPATH environment variable.</li>
+  and explicitly point them with the CLASSPATH environment variable.</li>
   </ol>
 
   <h2>Resources</h2>
--- a/ogr/ogrsf_frmts/ogrsf_frmts.dox
+++ b/ogr/ogrsf_frmts/ogrsf_frmts.dox
@@ -911,7 +911,7 @@ success.
  @param poSpatialFilter geometry which represents a spatial filter. Can be NULL.
  @param pszDialect allows control of the statement dialect. If set to NULL, the
 OGR SQL engine will be used, except for RDBMS drivers that will use their dedicated SQL engine,
-unless OGRSQL is explicitely passed as the dialect. Starting with OGR 1.10, the SQLITE dialect
+unless OGRSQL is explicitly passed as the dialect. Starting with OGR 1.10, the SQLITE dialect
 can also be used.
 
  @return an OGRLayer containing the results of the query.  Deallocate with
@@ -949,7 +949,7 @@ can also be used.
  @param hSpatialFilter handle to a geometry which represents a spatial filter. Can be NULL.
  @param pszDialect allows control of the statement dialect. If set to NULL, the
 OGR SQL engine will be used, except for RDBMS drivers that will use their dedicated SQL engine,
-unless OGRSQL is explicitely passed as the dialect. Starting with OGR 1.10, the SQLITE dialect
+unless OGRSQL is explicitly passed as the dialect. Starting with OGR 1.10, the SQLITE dialect
 can also be used.
 
  @return an handle to a OGRLayer containing the results of the query.  
--- a/ogr/ogrsf_frmts/osm/ogrosmdatasource.cpp
+++ b/ogr/ogrsf_frmts/osm/ogrosmdatasource.cpp
@@ -4111,7 +4111,7 @@ OGRLayer * OGROSMDataSource::ExecuteSQL(
                                                             poSpatialFilter,
                                                             pszDialect );
 
-            /* If the user explicitely run a COUNT() request, then do it ! */
+            /* If the user explicitly run a COUNT() request, then do it ! */
             if( poResultSetLayer )
             {
                 if( pszDialect != NULL && EQUAL(pszDialect, "SQLITE") )
--- a/ogr/ogrsf_frmts/pg/drv_pg_advanced.html
+++ b/ogr/ogrsf_frmts/pg/drv_pg_advanced.html
@@ -116,7 +116,7 @@ mode, will be retrieved from the databas
 new behaviour is that you must be careful if you re-use the same feature object in a loop that makes
 insertions. After the first iteration, the FID will be set to a non-null value, so at the second iteration,
 CreateFeature() will try to insert the new feature with the FID of the previous feature, which will fail as
-you cannot insert 2 features with same FID. So in that case you must explicitely reset the FID before calling CreateFeature(),
+you cannot insert 2 features with same FID. So in that case you must explicitly reset the FID before calling CreateFeature(),
 or use a fresh feature object.<p>
 
 Snippet example in Python :
--- a/ogr/ogrsf_frmts/sqlite/ogr_sqlite.h
+++ b/ogr/ogrsf_frmts/sqlite/ogr_sqlite.h
@@ -607,7 +607,7 @@ class OGRSQLiteDataSource : public OGRDa
 #endif
 
     VSILFILE*           fpMainFile; /* Set by the VFS layer when it opens the DB */
-                                    /* Must *NOT* be closed by the datasource explicitely. */
+                                    /* Must *NOT* be closed by the datasource explicitly. */
     GIntBig             nFileTimestamp;
     int                 bLastSQLCommandIsUpdateLayerStatistics;
 
--- a/ogr/ogrsf_frmts/sqlite/ogrsqlitevirtualogr.cpp
+++ b/ogr/ogrsf_frmts/sqlite/ogrsqlitevirtualogr.cpp
@@ -545,7 +545,7 @@ int OGR2SQLITE_ConnectCreate(sqlite3* hD
 
             if( poDS->GetLayerCount() > 1 )
             {
-                *pzErr = sqlite3_mprintf( "Datasource '%s' has more than one layers, and none was explicitely selected.",
+                *pzErr = sqlite3_mprintf( "Datasource '%s' has more than one layers, and none was explicitly selected.",
                                           osDSName.c_str() );
                 poDS->Release();
                 return SQLITE_ERROR;
--- a/ogr/ogrsf_frmts/vrt/drv_vrt.html
+++ b/ogr/ogrsf_frmts/vrt/drv_vrt.html
@@ -146,7 +146,7 @@ element to wkbNone.
 
 <li> <b>SrcRegion</b> (optionnal, from GDAL 1.7.0) : This element is used
 to define an initial spatial filter for the source features. This spatial
-filter will be combined with any spatial filter explicitely set on the VRT
+filter will be combined with any spatial filter explicitly set on the VRT
 layer with the SetSpatialFilter() method. The value of the element must be
 a valid WKT string defining a polygon. An optional <b>clip</b> attribute
 can be set to "TRUE" to clip the geometries to the source region, otherwise
--- a/swig/include/cpl.i
+++ b/swig/include/cpl.i
@@ -363,7 +363,7 @@ int VSIUnlink(const char * utf8_path );
 
 /* Added in GDAL 1.7.0 */
 /* Thread support is necessary for binding languages with threaded GC */
-/* even if the user doesn't explicitely use threads */
+/* even if the user doesn't explicitly use threads */
 %inline {
 int wrapper_HasThreadSupport()
 {
--- a/swig/include/python/docs/ogr_datasource_docs.i
+++ b/swig/include/python/docs/ogr_datasource_docs.i
@@ -171,7 +171,7 @@ filter. Can be NULL.
 
 pszDialect:  allows control of the statement dialect. If set to NULL,
 the OGR SQL engine will be used, except for RDBMS drivers that will
-use their dedicated SQL engine, unless OGRSQL is explicitely passed as
+use their dedicated SQL engine, unless OGRSQL is explicitly passed as
 the dialect.
 
 an handle to a OGRLayer containing the results of the query.
--- a/swig/include/python/typemaps_python.i
+++ b/swig/include/python/typemaps_python.i
@@ -685,7 +685,7 @@ CreateTupleFromDoubleArray( int *first,
 %typemap(typecheck,precedence=SWIG_TYPECHECK_POINTER) (char **dict)
 {
   /* %typecheck(SWIG_TYPECHECK_POINTER) (char **dict) */
-  /* Note: we exclude explicitely strings, because they can be considered as a sequence of characters, */
+  /* Note: we exclude explicitly strings, because they can be considered as a sequence of characters, */
   /* which is not desirable since it makes it impossible to define bindings such as SetMetadata(string) and SetMetadata(array_of_string) */
   /* (see #4816) */
   $1 = ((PyMapping_Check($input) || PySequence_Check($input) ) && !SWIG_CheckState(SWIG_AsCharPtrAndSize($input, 0, NULL, 0)) ) ? 1 : 0;
--- a/swig/java/javadoc.java
+++ b/swig/java/javadoc.java
@@ -1336,7 +1336,7 @@ public class gdal:public static Driver G
  * The first successful open will result in a returned dataset.  If all
  * drivers fail then null is returned.
  * <p>
- * It is required that you explicitely close a dataset opened in update
+ * It is required that you explicitly close a dataset opened in update
  * mode with the Dataset.delete() method. Otherwise the data might not be
  * flushed to the disk. Don't rely only on Java garbage collection.
  *
@@ -6738,7 +6738,7 @@ public class Layer:public int DeleteFeat
  Sequential reads are generally considered interrupted by a GetFeature() call.
  <p>
  The returned feature will be properly handled by the Java garbage collector,
- but you can help it by explicitely calling the
+ but you can help it by explicitly calling the
  Feature.<a href="Feature.html#delete()">delete()</a> method.
 
  @param fid the feature id of the feature to read. 
@@ -6870,7 +6870,7 @@ public class Layer:public int GetGeomTyp
  ResetReading() method can be used to start at the beginning again.  
  <p>
  The returned feature will be properly handled by the Java garbage collector,
- but you can help it by explicitely calling the
+ but you can help it by explicitly calling the
  Feature.<a href="Feature.html#delete()">delete()</a> method.
 
  @return a feature, or null if no more features are available. 
@@ -7595,7 +7595,7 @@ public class Feature:public Feature Clon
  * <p>
  * Calling this method is not required as normal garbage collection will
  * reclaim associated resources when the object goes out of scope.
- * Otherwise calling delete() explicitely will help release resources sooner.
+ * Otherwise calling delete() explicitly will help release resources sooner.
  * Don't call any method on a deleted object !
  */
 public class Feature:public void delete()
@@ -8475,7 +8475,7 @@ public class Geometry:public boolean Cro
  * <p>
  * Calling this method is not required as normal garbage collection will
  * reclaim associated resources when the object goes out of scope.
- * Otherwise calling delete() explicitely will help release resources sooner.
+ * Otherwise calling delete() explicitly will help release resources sooner.
  * Don't call any method on a deleted object !
  */
 public class Geometry:public void delete()
--- a/swig/python/extensions/gdal_wrap.cpp
+++ b/swig/python/extensions/gdal_wrap.cpp
@@ -8002,7 +8002,7 @@ SWIGINTERN PyObject *_wrap_MajorObject_S
     if (_v) {
       {
         /* %typecheck(SWIG_TYPECHECK_POINTER) (char **dict) */
-        /* Note: we exclude explicitely strings, because they can be considered as a sequence of characters, */
+        /* Note: we exclude explicitly strings, because they can be considered as a sequence of characters, */
         /* which is not desirable since it makes it impossible to define bindings such as SetMetadata(string) and SetMetadata(array_of_string) */
         /* (see #4816) */
         _v = ((PyMapping_Check(argv[1]) || PySequence_Check(argv[1]) ) && !SWIG_CheckState(SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0)) ) ? 1 : 0;
--- a/swig/python/extensions/ogr_wrap.cpp
+++ b/swig/python/extensions/ogr_wrap.cpp
@@ -20887,7 +20887,7 @@ static PyMethodDef SwigMethods[] = {
 		"\n"
 		"pszDialect:  allows control of the statement dialect. If set to NULL,\n"
 		"the OGR SQL engine will be used, except for RDBMS drivers that will\n"
-		"use their dedicated SQL engine, unless OGRSQL is explicitely passed as\n"
+		"use their dedicated SQL engine, unless OGRSQL is explicitly passed as\n"
 		"the dialect.\n"
 		"\n"
 		"an handle to a OGRLayer containing the results of the query.\n"
--- a/swig/python/osgeo/ogr.py
+++ b/swig/python/osgeo/ogr.py
@@ -737,7 +737,7 @@ class DataSource(_object):
 
         pszDialect:  allows control of the statement dialect. If set to NULL,
         the OGR SQL engine will be used, except for RDBMS drivers that will
-        use their dedicated SQL engine, unless OGRSQL is explicitely passed as
+        use their dedicated SQL engine, unless OGRSQL is explicitly passed as
         the dialect.
 
         an handle to a OGRLayer containing the results of the query.
--- a/apps/gdal_grid.cpp
+++ b/apps/gdal_grid.cpp
@@ -610,7 +610,7 @@ int main( int argc, char ** argv )
 {
     GDALDriverH     hDriver;
     const char      *pszSource=NULL, *pszDest=NULL, *pszFormat = "GTiff";
-    int             bFormatExplicitelySet = FALSE;
+    int             bFormatExplicitlySet = FALSE;
     char            **papszLayers = NULL;
     const char      *pszBurnAttribute = NULL;
     double          dfIncreaseBurnValue = 0.0;
@@ -663,7 +663,7 @@ int main( int argc, char ** argv )
         {
             CHECK_HAS_ENOUGH_ADDITIONAL_ARGS(1);
             pszFormat = argv[++i];
-            bFormatExplicitelySet = TRUE;
+            bFormatExplicitlySet = TRUE;
         }
 
         else if( EQUAL(argv[i],"-q") || EQUAL(argv[i],"-quiet") )
@@ -1009,7 +1009,7 @@ int main( int argc, char ** argv )
     if ( nYSize == 0 )
         nYSize = 256;
 
-    if (!bQuiet && !bFormatExplicitelySet)
+    if (!bQuiet && !bFormatExplicitlySet)
         CheckExtensionConsistency(pszDest, pszFormat);
 
     hDstDS = GDALCreate( hDriver, pszDest, nXSize, nYSize, nBands,
--- a/apps/gdal_translate.cpp
+++ b/apps/gdal_translate.cpp
@@ -278,7 +278,7 @@ static int ProxyMain( int argc, char **
     int			i;
     int			nRasterXSize, nRasterYSize;
     const char		*pszSource=NULL, *pszDest=NULL, *pszFormat = "GTiff";
-    int bFormatExplicitelySet = FALSE;
+    int bFormatExplicitlySet = FALSE;
     GDALDriverH		hDriver;
     int			*panBandList = NULL; /* negative value of panBandList[i] means mask band of ABS(panBandList[i]) */
     int         nBandCount = 0, bDefBands = TRUE;
@@ -363,7 +363,7 @@ static int ProxyMain( int argc, char **
         else if( EQUAL(argv[i],"-of") && i < argc-1 )
         {
             pszFormat = argv[++i];
-            bFormatExplicitelySet = TRUE;
+            bFormatExplicitlySet = TRUE;
         }
 
         else if( EQUAL(argv[i],"-q") || EQUAL(argv[i],"-quiet") )
@@ -753,7 +753,7 @@ static int ProxyMain( int argc, char **
         pfnProgress = GDALDummyProgress;
     }
 
-    if (!bQuiet && !bFormatExplicitelySet)
+    if (!bQuiet && !bFormatExplicitlySet)
         CheckExtensionConsistency(pszDest, pszFormat);
 
 /* -------------------------------------------------------------------- */
--- a/apps/gdaldem.cpp
+++ b/apps/gdaldem.cpp
@@ -2237,7 +2237,7 @@ int main( int argc, char ** argv )
     const char *pszDstFilename = NULL;
     const char *pszColorFilename = NULL;
     const char *pszFormat = "GTiff";
-    int bFormatExplicitelySet = FALSE;
+    int bFormatExplicitlySet = FALSE;
     char **papszCreateOptions = NULL;
     
     GDALDatasetH hSrcDataset = NULL;
@@ -2430,7 +2430,7 @@ int main( int argc, char ** argv )
         {
             CHECK_HAS_ENOUGH_ADDITIONAL_ARGS(1);
             pszFormat = argv[++i];
-            bFormatExplicitelySet = TRUE;
+            bFormatExplicitlySet = TRUE;
         }
         else if( argv[i][0] == '-' )
         {
@@ -2521,7 +2521,7 @@ int main( int argc, char ** argv )
         exit( 1 );
     }
 
-    if (!bQuiet && !bFormatExplicitelySet)
+    if (!bQuiet && !bFormatExplicitlySet)
         CheckExtensionConsistency(pszDstFilename, pszFormat);
 
     double dfDstNoDataValue = 0;
--- a/apps/gdalenhance.cpp
+++ b/apps/gdalenhance.cpp
@@ -89,7 +89,7 @@ int main( int argc, char ** argv )
     GDALDatasetH	hDataset, hOutDS;
     int			i;
     const char		*pszSource=NULL, *pszDest=NULL, *pszFormat = "GTiff";
-    int bFormatExplicitelySet = FALSE;
+    int bFormatExplicitlySet = FALSE;
     GDALDriverH		hDriver;
     GDALDataType	eOutputType = GDT_Unknown;
     char                **papszCreateOptions = NULL;
@@ -130,7 +130,7 @@ int main( int argc, char ** argv )
         else if( EQUAL(argv[i],"-of") && i < argc-1 )
         {
             pszFormat = argv[++i];
-            bFormatExplicitelySet = TRUE;
+            bFormatExplicitlySet = TRUE;
         }
 
         else if( EQUAL(argv[i],"-ot") && i < argc-1 )
@@ -265,7 +265,7 @@ int main( int argc, char ** argv )
         Usage();
     }
 
-    if (!bQuiet && pszDest != NULL && !bFormatExplicitelySet)
+    if (!bQuiet && pszDest != NULL && !bFormatExplicitlySet)
         CheckExtensionConsistency(pszDest, pszFormat);
 
 /* -------------------------------------------------------------------- */
--- a/apps/gdalwarp.cpp
+++ b/apps/gdalwarp.cpp
@@ -337,7 +337,7 @@ int main( int argc, char ** argv )
 {
     GDALDatasetH	hDstDS;
     const char         *pszFormat = "GTiff";
-    int bFormatExplicitelySet = FALSE;
+    int bFormatExplicitlySet = FALSE;
     char              **papszSrcFiles = NULL;
     char               *pszDstFilename = NULL;
     int                 bCreateOutput = FALSE, i;
@@ -440,7 +440,7 @@ int main( int argc, char ** argv )
         {
             CHECK_HAS_ENOUGH_ADDITIONAL_ARGS(1);
             pszFormat = argv[++i];
-            bFormatExplicitelySet = TRUE;
+            bFormatExplicitlySet = TRUE;
             bCreateOutput = TRUE;
             if( EQUAL(pszFormat,"VRT") )
                 bVRT = TRUE;
@@ -898,7 +898,7 @@ int main( int argc, char ** argv )
 
     if( hDstDS == NULL )
     {
-        if (!bQuiet && !bFormatExplicitelySet)
+        if (!bQuiet && !bFormatExplicitlySet)
             CheckExtensionConsistency(pszDstFilename, pszFormat);
 
         hDstDS = GDALWarpCreateOutput( papszSrcFiles, pszDstFilename,pszFormat,
--- a/apps/nearblack.cpp
+++ b/apps/nearblack.cpp
@@ -123,7 +123,7 @@ int main( int argc, char ** argv )
     int bSetAlpha = FALSE;
     int bSetMask = FALSE;
     const char* pszDriverName = "HFA";
-    int bFormatExplicitelySet = FALSE;
+    int bFormatExplicitlySet = FALSE;
     char** papszCreationOptions = NULL;
     int bQuiet = FALSE;
 
@@ -148,7 +148,7 @@ int main( int argc, char ** argv )
         {
             CHECK_HAS_ENOUGH_ADDITIONAL_ARGS(1);
             pszDriverName = argv[++i];
-            bFormatExplicitelySet = TRUE;
+            bFormatExplicitlySet = TRUE;
         }
         else if( EQUAL(argv[i], "-white") ) {
             bNearWhite = TRUE;
@@ -270,7 +270,7 @@ int main( int argc, char ** argv )
         if (hDriver == NULL)
             exit(1);
 
-        if (!bQuiet && !bFormatExplicitelySet)
+        if (!bQuiet && !bFormatExplicitlySet)
             CheckExtensionConsistency(pszOutFile, pszDriverName);
 
         if (bSetAlpha)
--- a/apps/ogr2ogr.cpp
+++ b/apps/ogr2ogr.cpp
@@ -855,7 +855,7 @@ int main( int nArgc, char ** papszArgv )
 {
     int          nRetCode = 0;
     int          bQuiet = FALSE;
-    int          bFormatExplicitelySet = FALSE;
+    int          bFormatExplicitlySet = FALSE;
     const char  *pszFormat = "ESRI Shapefile";
     const char  *pszDataSource = NULL;
     const char  *pszDestDataSource = NULL;
@@ -953,7 +953,7 @@ int main( int nArgc, char ** papszArgv )
         else if( EQUAL(papszArgv[iArg],"-f") )
         {
             CHECK_HAS_ENOUGH_ADDITIONAL_ARGS(1);
-            bFormatExplicitelySet = TRUE;
+            bFormatExplicitlySet = TRUE;
             pszFormat = papszArgv[++iArg];
         }
         else if( EQUAL(papszArgv[iArg],"-dsco") )
@@ -1566,7 +1566,7 @@ int main( int nArgc, char ** papszArgv )
 /* -------------------------------------------------------------------- */
     if( !bUpdate )
     {
-        if (!bQuiet && !bFormatExplicitelySet)
+        if (!bQuiet && !bFormatExplicitlySet)
             CheckDestDataSourceNameConsistency(pszDestDataSource, pszFormat);
 
         OGRSFDriverRegistrar *poR = OGRSFDriverRegistrar::GetRegistrar();
--- a/ogr/ogrsf_frmts/filegdb/FGdbDatasource.cpp
+++ b/ogr/ogrsf_frmts/filegdb/FGdbDatasource.cpp
@@ -477,7 +477,7 @@ OGRLayer * FGdbDataSource::ExecuteSQL( c
         CPLDebug("FGDB", "Support for SELECT is known to be partially "
                          "non-compliant with FileGDB SDK API v1.2.\n"
                          "So for now, we use default OGR SQL engine. "
-                         "Explicitely specify -dialect FileGDB\n"
+                         "Explicitly specify -dialect FileGDB\n"
                          "to use the SQL engine from the FileGDB SDK API");
         return OGRDataSource::ExecuteSQL( pszSQLCommand,
                                         poSpatialFilter,
