Description: Fix 'consistant' typo, replace with 'consistent'.
Author: Bas Couwenberg <sebastic@xs4all.nl>
Forwarded: http://trac.osgeo.org/gdal/ticket/5995

--- a/apps/commonutils.cpp
+++ b/apps/commonutils.cpp
@@ -36,7 +36,7 @@ CPL_CVSID("$Id: commonutils.cpp 27384 20
 /* -------------------------------------------------------------------- */
 /*                      CheckExtensionConsistency()                     */
 /*                                                                      */
-/*      Check that the target file extension is consistant with the     */
+/*      Check that the target file extension is consistent with the     */
 /*      requested driver. Actually, we only warn in cases where the     */
 /*      inconsistency is blatant (use of an extension declared by one   */
 /*      or several drivers, and not by the selected one)                */
--- a/port/cpl_csv.cpp
+++ b/port/cpl_csv.cpp
@@ -464,7 +464,7 @@ char CSVDetectSeperator (const char* psz
                 chDelimiter = *pszLine;
             else if (chDelimiter != *pszLine)
             {
-                /* The separator is not consistant on the line. */
+                /* The separator is not consistent on the line. */
                 CPLDebug("CSV", "Inconsistent separator. '%c' and '%c' found. Using ',' as default",
                          chDelimiter, *pszLine);
                 chDelimiter = ',';
--- a/alg/gdalwarper.h
+++ b/alg/gdalwarper.h
@@ -45,7 +45,7 @@
 
 CPL_C_START
 
-/* Note: values are selected to be consistant with GDALRIOResampleAlg of gcore/gdal.h */ 
+/* Note: values are selected to be consistent with GDALRIOResampleAlg of gcore/gdal.h */ 
 /*! Warp Resampling Algorithm */
 typedef enum {
   /*! Nearest neighbour (select on one input pixel) */ GRA_NearestNeighbour=0,
--- a/gcore/gdal.h
+++ b/gcore/gdal.h
@@ -103,7 +103,7 @@ typedef enum {
     /*! Write data */  GF_Write = 1
 } GDALRWFlag;
 
-/* NOTE: values are selected to be consistant with GDALResampleAlg of alg/gdalwarper.h */ 
+/* NOTE: values are selected to be consistent with GDALResampleAlg of alg/gdalwarper.h */ 
 /** RasterIO() resampling method.
   * @since GDAL 2.0
   */
--- a/gcore/gdaljp2metadata.cpp
+++ b/gcore/gdaljp2metadata.cpp
@@ -1139,7 +1139,7 @@ int GDALJP2Metadata::ParseGMLCoverageDes
         {
             CPLError(CE_Warning, CPLE_AppDefined,
                      "It is likely that the axis order of the GMLJP2 box is not "
-                     "consistant with the EPSG order and that the resulting georeferencing "
+                     "consistent with the EPSG order and that the resulting georeferencing "
                      "will be incorrect. Try setting GDAL_IGNORE_AXIS_ORIENTATION=TRUE if it is the case");
         }
     }
--- a/ogr/ogrgeometryfactory.cpp
+++ b/ogr/ogrgeometryfactory.cpp
@@ -3809,7 +3809,7 @@ static int OGRGF_DetectArc(const OGRLine
 
         double dfStep10 = fabs(alpha1_2 - alpha0_2);
         double dfStep21 = fabs(alpha2_2 - alpha1_2);
-        /* Check that the angle step is consistant with the original */
+        /* Check that the angle step is consistent with the original */
         /* step. */
         if( !(dfStep10 < 2 * dfMaxDeltaAlpha && dfStep21 < 2 * dfMaxDeltaAlpha) )
         {
@@ -3888,7 +3888,7 @@ static int OGRGF_DetectArc(const OGRLine
                 }
 
 #ifdef VERBOSE_DEBUG_CURVEFROMLINESTRING
-                printf("j=%d, nAlphaRatioReversed = %u --> unconsistant values accross arc. Don't use it\n",
+                printf("j=%d, nAlphaRatioReversed = %u --> unconsistent values accross arc. Don't use it\n",
                         j, nAlphaRatioReversed);
 #endif
                 bValidAlphaRatio = FALSE;
--- a/ogr/ogrsf_frmts/filegdb/FGdbLayer.cpp
+++ b/ogr/ogrsf_frmts/filegdb/FGdbLayer.cpp
@@ -776,7 +776,7 @@ char* FGdbLayer::CreateFieldDefn(OGRFiel
             {
                 if( fldtypeCheck != fldtype )
                 {
-                    CPLError(CE_Warning, CPLE_AppDefined, "Ignoring COLUMN_TYPES=%s=%s : %s not consistant with OGR data type",
+                    CPLError(CE_Warning, CPLE_AppDefined, "Ignoring COLUMN_TYPES=%s=%s : %s not consistent with OGR data type",
                          fieldname.c_str(), pszFieldType, pszFieldType);
                 }
                 else
--- a/ogr/ogrsf_frmts/openfilegdb/filegdbtable.cpp
+++ b/ogr/ogrsf_frmts/openfilegdb/filegdbtable.cpp
@@ -591,7 +591,7 @@ int FileGDBTable::ReadTableXHeader()
             returnErrorIf(VSIFReadL( pabyTablXBlockMap, nSizeInBytes, 1, fpTableX ) != 1 );
             /* returnErrorIf(nMagic2 == 0 ); */
 
-            // Check that the map is consistant with n1024Blocks
+            // Check that the map is consistent with n1024Blocks
             GUInt32 nCountBlocks = 0;
             for(GUInt32 i=0;i<nBitsForBlockMap;i++)
                 nCountBlocks += TEST_BIT(pabyTablXBlockMap, i) != 0;
--- a/port/cpl_virtualmem.h
+++ b/port/cpl_virtualmem.h
@@ -198,7 +198,7 @@ int CPL_DLL CPLIsVirtualMemFileMapAvaila
  * @param  nOffset  Offset in the file to start the mapping from.
  * @param  nLength  Length of the portion of the file to map into memory.
  * @param eAccessMode Permission to use for the virtual memory mapping. This must
- *                    be consistant with how the file has been opened.
+ *                    be consistent with how the file has been opened.
  * @param pfnFreeUserData callback that is called when the object is destroyed.
  * @param pCbkUserData user data passed to pfnFreeUserData.
  * @return a virtual memory object that must be freed by CPLVirtualMemFree(),
--- a/swig/python/samples/validate_jp2.py
+++ b/swig/python/samples/validate_jp2.py
@@ -450,7 +450,7 @@ def validate(filename, oidoc, inspire_tg
                 if h != '1':
                     error_report.EmitError('GeoJP2', 'GeoTIFF should have height of 1 pixel, not %s' % str(h))
 
-        # Check that information of GeoJP2 and GMLJP2 are consistant
+        # Check that information of GeoJP2 and GMLJP2 are consistent
         if geotiff_found and gmljp2_found:
             check_geojp2_gmljp2_consistency(filename, error_report)
 
--- a/swig/python/osgeo/gdal_array.py
+++ b/swig/python/osgeo/gdal_array.py
@@ -274,9 +274,9 @@ def DatasetReadAsArray( ds, xoff=0, yoff
         shape_buf_xsize = buf_obj.shape[2]
         shape_buf_ysize = buf_obj.shape[1]
         if buf_xsize is not None and buf_xsize != shape_buf_xsize:
-            raise ValueError('Specified buf_xsize not consistant with array shape')
+            raise ValueError('Specified buf_xsize not consistent with array shape')
         if buf_ysize is not None and buf_ysize != shape_buf_ysize:
-            raise ValueError('Specified buf_ysize not consistant with array shape')
+            raise ValueError('Specified buf_ysize not consistent with array shape')
         if buf_obj.shape[0] != ds.RasterCount:
             raise ValueError('Array should have space for %d bands' % ds.RasterCount)
 
@@ -284,7 +284,7 @@ def DatasetReadAsArray( ds, xoff=0, yoff
         if not datatype:
             raise ValueError("array does not have corresponding GDAL data type")
         if buf_type is not None and buf_type != datatype:
-            raise ValueError("Specified buf_type not consistant with array type")
+            raise ValueError("Specified buf_type not consistent with array type")
         buf_type = datatype
 
     if DatasetIONumPy( ds, 0, xoff, yoff, win_xsize, win_ysize,
@@ -332,15 +332,15 @@ def BandReadAsArray( band, xoff = 0, yof
             shape_buf_xsize = buf_obj.shape[2]
             shape_buf_ysize = buf_obj.shape[1]
         if buf_xsize is not None and buf_xsize != shape_buf_xsize:
-            raise ValueError('Specified buf_xsize not consistant with array shape')
+            raise ValueError('Specified buf_xsize not consistent with array shape')
         if buf_ysize is not None and buf_ysize != shape_buf_ysize:
-            raise ValueError('Specified buf_ysize not consistant with array shape')
+            raise ValueError('Specified buf_ysize not consistent with array shape')
 
         datatype = NumericTypeCodeToGDALTypeCode( buf_obj.dtype.type )
         if not datatype:
             raise ValueError("array does not have corresponding GDAL data type")
         if buf_type is not None and buf_type != datatype:
-            raise ValueError("Specified buf_type not consistant with array type")
+            raise ValueError("Specified buf_type not consistent with array type")
         buf_type = datatype
 
     if BandRasterIONumPy( band, 0, xoff, yoff, win_xsize, win_ysize,
--- a/swig/include/gdal_array.i
+++ b/swig/include/gdal_array.i
@@ -1076,9 +1076,9 @@ def DatasetReadAsArray( ds, xoff=0, yoff
         shape_buf_xsize = buf_obj.shape[2]
         shape_buf_ysize = buf_obj.shape[1]
         if buf_xsize is not None and buf_xsize != shape_buf_xsize:
-            raise ValueError('Specified buf_xsize not consistant with array shape')
+            raise ValueError('Specified buf_xsize not consistent with array shape')
         if buf_ysize is not None and buf_ysize != shape_buf_ysize:
-            raise ValueError('Specified buf_ysize not consistant with array shape')
+            raise ValueError('Specified buf_ysize not consistent with array shape')
         if buf_obj.shape[0] != ds.RasterCount:
             raise ValueError('Array should have space for %d bands' % ds.RasterCount)
 
@@ -1086,7 +1086,7 @@ def DatasetReadAsArray( ds, xoff=0, yoff
         if not datatype:
             raise ValueError("array does not have corresponding GDAL data type")
         if buf_type is not None and buf_type != datatype:
-            raise ValueError("Specified buf_type not consistant with array type")
+            raise ValueError("Specified buf_type not consistent with array type")
         buf_type = datatype
 
     if DatasetIONumPy( ds, 0, xoff, yoff, win_xsize, win_ysize,
@@ -1134,15 +1134,15 @@ def BandReadAsArray( band, xoff = 0, yof
             shape_buf_xsize = buf_obj.shape[2]
             shape_buf_ysize = buf_obj.shape[1]
         if buf_xsize is not None and buf_xsize != shape_buf_xsize:
-            raise ValueError('Specified buf_xsize not consistant with array shape')
+            raise ValueError('Specified buf_xsize not consistent with array shape')
         if buf_ysize is not None and buf_ysize != shape_buf_ysize:
-            raise ValueError('Specified buf_ysize not consistant with array shape')
+            raise ValueError('Specified buf_ysize not consistent with array shape')
 
         datatype = NumericTypeCodeToGDALTypeCode( buf_obj.dtype.type )
         if not datatype:
             raise ValueError("array does not have corresponding GDAL data type")
         if buf_type is not None and buf_type != datatype:
-            raise ValueError("Specified buf_type not consistant with array type")
+            raise ValueError("Specified buf_type not consistent with array type")
         buf_type = datatype
 
     if BandRasterIONumPy( band, 0, xoff, yoff, win_xsize, win_ysize,
